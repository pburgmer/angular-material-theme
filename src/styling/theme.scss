@import '~@angular/material/theming';

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

@import "color-palettes";
@import "typography";

$tcc-angular-material-theme-assets-base-path-node: '~@thecodecampus/angular-material-theme/src/assets';

/**
 * $assets-base-path as parameter with default value just to be able to override it for the demo.
 * No need to pass in $assets-base-path in regular installations.
 * Background: sass does not rewrite relative URLs. URLs will not be changed during compilation.
 * Therefore URLs are not relative to the file they are written in but relative to the output of the sass compiler.
 * In Angular context the CLI (webpack) will rewrite URLs and copy the assets of node modules. with ~ we can use a
 * quasi absolute path starting at our node_modules folder.
 * If the theme is not installed as a package, the user has to adjust the path (should be relevant for the demo only).
 */
@mixin tcc-angular-material-theme($assets-base-path: $tcc-angular-material-theme-assets-base-path-node, $themeFun: get_function(mat-light-theme)) {

  $tcc-primary: mat-palette($tcc-orange) !default;
  $tcc-accent: mat-palette($tcc-blue) !default;

  $tcc-theme: call($themeFun, $tcc-primary, $tcc-accent) !default;

  @include angular-material-theme($tcc-theme);

  @include tcc-font-faces($fonts-base-path: $assets-base-path + '/fonts');

  $custom-typography: mat-typography-config(
    $font-family: $tcc-font-family-quoted
  ) !default;

  @include angular-material-typography($custom-typography);

  body {
    font-family: $tcc-font-family;
  }
}

@mixin tcc-angular-material-dark-theme($assets-base-path: $tcc-angular-material-theme-assets-base-path-node) {
  @include tcc-angular-material-theme($assets-base-path, get_function(mat-dark-theme));
}
